<?php namespace Protestwit\Finance;

use Jenssegers\Mongodb\Eloquent\Model;


use App\Traits\Searchable;
use Carbon\Carbon;
use Jenssegers\Mongodb\Eloquent\HybridRelations;
use Protestwit\Finance\Models\Quote;


class Nyse extends Model
{
    use HybridRelations;
    use Searchable;

    protected $client;

    protected $fillable = ['symbol'];
    protected $connection = 'archive';
    protected $collection = 'stock_symbols';
    protected $searchableColumns = ['symbol'];
    protected $searchableRelations = [];


    public function __construct(array $attributes = [])
    {
        $this->client = new \Scheb\YahooFinanceApi\ApiClient();
            $this->bootIfNotBooted();
            $this->syncOriginal();
            $this->fill($attributes);

    }

    public function save(array $options = [])
    {
        if(isset($this->attributes['symbol']))
        {
            $this->buildHistoricalQuotes();
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }


    public static function setSymbol($symbol = null)
    {
        $attributes = ['symbol' => $symbol];
        $existing = Nyse::where('symbol' , '=', $symbol)->first();
        if (!$existing) {

            $model = new static($attributes);

            $model->save();

            $existing = $model;
        }elseif(!$existing->quotes)
        {
            $existing->buildHistoricalQuotes();
        }

        return $existing;
    }



    public function quotes()
    {
        return $this->hasMany('Protestwit\Finance\Models\Quote','symbol','symbol');
    }
    

    
    public function buildHistoricalQuotes()
    {
        $start_date = Carbon::now()->subYear(1);
        $end_date = Carbon::now();
        try{
        $historical_data = $this->client->getHistoricalData($this->symbol,$start_date,$end_date);
        } catch(\Exception $e)
        {
            \Log::info('Error Getting Historical Quote: ' . $e->getMessage());
        }

        foreach($historical_data['query']['results']['quote'] as $quote )
        {
            $this->digestHistoricalQuote($quote);
        }
        return $this;
    }

    public function digestHistoricalQuote($quote = [])
    {
        $quoteData = array_change_key_case($quote,CASE_LOWER);


        if(isset($quoteData['symbol']) && isset($quoteData['date'])) {

            $existing = Quote::where('symbol','=',$quoteData['symbol'])->where('date', '=', $quoteData['date'])->first();
            if(!$existing) {
                $existing = Quote::create($quoteData);
            }

            $this->quotes()->save($existing);
        }

    }



    
    
}